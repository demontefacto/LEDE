--- a/arch/mips/kernel/smp-cmp.c
+++ b/arch/mips/kernel/smp-cmp.c
@@ -43,9 +43,21 @@ static void cmp_init_secondary(void)
 {
 	struct cpuinfo_mips *c __maybe_unused = &current_cpu_data;
 
+#ifdef CONFIG_SOC_MT7621
+        if(cpu_has_veic) {
+                printk("%s:%s[%d]\n", __FILE__, __func__, __LINE__);
+                change_c0_status(ST0_IM, 0);
+        } else {
+                change_c0_status(ST0_IM, STATUSF_IP2 | STATUSF_IP3 | STATUSF_IP4 | STATUSF_IP5 | STATUSF_IP6 | STATUSF_IP7);
+        }
+                change_c0_status(ST0_IM, STATUSF_IP2 | STATUSF_IP3 | STATUSF_IP4 | STATUSF_IP5 | STATUSF_IP6 | STATUSF_IP7);
+#else
 	/* Assume GIC is present */
 	change_c0_status(ST0_IM, STATUSF_IP2 | STATUSF_IP3 | STATUSF_IP4 |
 				 STATUSF_IP5 | STATUSF_IP6 | STATUSF_IP7);
+#endif
+
+        c->core = (read_c0_ebase() & 0x3ff) >> (fls(smp_num_siblings)-1);
 
 	/* Enable per-cpu interrupts: platform specific */
 
--- a/arch/mips/ralink/Kconfig
+++ b/arch/mips/ralink/Kconfig
@@ -56,6 +56,7 @@ choice
 		select COMMON_CLK
 		select CLKSRC_MIPS_GIC
 		select HW_HAS_PCI
+		select GENERIC_CLOCKEVENTS_BROADCAST
 endchoice
 
 choice
--- a/arch/mips/ralink/mt7621.c
+++ b/arch/mips/ralink/mt7621.c
@@ -21,11 +21,14 @@
 #include <asm/mach-ralink/ralink_regs.h>
 #include <asm/mach-ralink/mt7621.h>
 #include <asm/mips-boards/launch.h>
+#include <asm/delay.h>
 
 #include <pinmux.h>
 
 #include "common.h"
 
+#define RALINK_RBUS_MATRIXCTL_BASE      0xBE000400
+
 #define SYSC_REG_SYSCFG		0x10
 #define SYSC_REG_CPLL_CLKCFG0	0x2c
 #define SYSC_REG_CUR_CLK_STS	0x44
@@ -178,6 +181,65 @@ bool plat_cpu_core_present(int core)
 	return true;
 }
 
+#ifdef CONFIG_SOC_MT7621
+
+#define LPS_PREC 8
+/*
+*  Re-calibration lpj(loop-per-jiffy).
+*  (derived from kernel/calibrate.c)
+*/
+static int udelay_recal(void)
+{
+	unsigned int i, lpj = 0;
+	unsigned long ticks, loopbit;
+	int lps_precision = LPS_PREC;
+
+	lpj = (1<<12);
+
+	while ((lpj <<= 1) != 0) {
+        	/* wait for "start of" clock tick */
+        	ticks = jiffies;
+        	while (ticks == jiffies)
+        		/* nothing */;
+		/* Go .. */
+		ticks = jiffies;
+		__delay(lpj);
+		ticks = jiffies - ticks;
+		if (ticks)
+			break;
+	}
+
+	/*
+	 * Do a binary approximation to get lpj set to
+	 * equal one clock (up to lps_precision bits)
+	 */
+        lpj >>= 1;
+        loopbit = lpj;
+        while (lps_precision-- && (loopbit >>= 1)) {
+        	lpj |= loopbit;
+		ticks = jiffies;
+		while (ticks == jiffies)
+			/* nothing */;
+		ticks = jiffies;
+		__delay(lpj);
+		if (jiffies != ticks)   /* longer than 1 tick */
+			lpj &= ~loopbit;
+	}
+	printk(KERN_INFO "%d CPUs re-calibrate udelay(lpj = %d)\n", NR_CPUS, lpj);
+
+	for(i=0; i< NR_CPUS; i++)
+		cpu_data[i].udelay_val = lpj;
+
+//	lpj = (*((volatile u32 *)(RALINK_RBUS_MATRIXCTL_BASE + 0x10)));
+//	lpj &= ~(0xF << 8);
+//	lpj |= (0xA << 8);
+//	(*((volatile u32 *)(RALINK_RBUS_MATRIXCTL_BASE + 0x10))) = lpj;
+
+	return 0;
+}
+device_initcall(udelay_recal);
+#endif
+
 void prom_soc_init(struct ralink_soc_info *soc_info)
 {
 	void __iomem *sysc = (void __iomem *) KSEG1ADDR(MT7621_SYSC_BASE);
--- a/arch/mips/ralink/timer-gic.c
+++ b/arch/mips/ralink/timer-gic.c
@@ -3,6 +3,7 @@
 #include <linux/of.h>
 #include <linux/clk-provider.h>
 #include <linux/clocksource.h>
+#include <asm/time.h>
 
 #include "common.h"
 
@@ -10,6 +11,8 @@ void __init plat_time_init(void)
 {
 	ralink_of_remap();
 
+	mips_hpt_frequency = 880000000 / 2;
+
 	of_clk_init(NULL);
 	clocksource_probe();
 }
